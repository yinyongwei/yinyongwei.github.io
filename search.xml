<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArrayList底层源码分析</title>
    <url>/2022/06/20/ArrayList/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>ArrayList</code><em>集合类实现了</em><code>List</code>接口，是 <strong>顺序容器</strong> ，即元素存放的数据与放进去的顺序相同，允许放入 <code>null</code> 元素，底层通过  Object数组[^1]实现。</p>
<p>　　       该类除了未实现同步外，其余跟 <code>Vector</code> 大致相同。每个 <em><code>ArrayList</code></em> 都有一个容量( <code>capacity</code> )，表示底层数组的实际大小，容器内存储元素的个数不能多于当前容量。当向容器中添加元素时，如果容量不足，容器会自动增大底层数组的大小。</p>
<p>　　</p>
<p>　　<img src="https://cdn.yinyongwei.cn/uPic/image-20220304151039-gvmbaku.png" alt="image.png"></p>
<p>　　</p>
<h1 id="底层结构"><a href="#底层结构" class="headerlink" title="底层结构"></a>底层结构</h1><ul>
<li><code>ArrayList</code> 中维护了一个<code>Object</code>数组  <code>elementData</code> ​；</li>
<li>创建 <code>ArrayList</code>  对象时，如果使用无参构造器，则 <code>elementData</code> 初始容量为 0 ;</li>
<li>第一次添加的时候，<code>elementData</code> 容量会被扩容为 10 ；</li>
<li>再次扩容时，<code>elementData</code>  的容量 &#x3D; 当前的<code>elementData</code> 容量 x 1.5 （ 即按照1.5倍进行扩容）；</li>
<li>创建 <code>ArrayList</code>  对象时，如果使用自定义容量的话，扩容时也是按照 <code>elementData</code> 当前容量的1.5倍进行扩容；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default initial capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shared empty array instance used for empty instances.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class="line"><span class="comment"> * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class="line"><span class="comment"> * empty ArrayList with elementData == EMPTY_ELEMENTDATA will be expanded to</span></span><br><span class="line"><span class="comment"> * DEFAULT_CAPACITY when the first element is added.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The size of the ArrayList (the number of elements it contains).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br></pre></td></tr></table></figure>

<p>　　</p>
<h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><p>　　在<code>ArrayList</code> 中，有三个构造器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with the specified initial capacity.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  initialCapacity  the initial capacity of the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the specified initial capacity</span></span><br><span class="line"><span class="comment"> *         is negative</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a list containing the elements of the specified</span></span><br><span class="line"><span class="comment"> * collection, in the order they are returned by the collection&#x27;s</span></span><br><span class="line"><span class="comment"> * iterator.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c the collection whose elements are to be placed into this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    size = elementData.length;</span><br><span class="line">    <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">    <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">        elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　<img src="https://cdn.yinyongwei.cn/uPic/1631615046273-8bc8daa1-6435-4a1b-a79a-fda6644e4a2e-20220304161304-5jx894s.png" alt="1631615046273-8bc8daa1-6435-4a1b-a79a-fda6644e4a2e.png"></p>
<p>　　</p>
<p>　　</p>
<h1 id="自动扩容"><a href="#自动扩容" class="headerlink" title="自动扩容"></a>自动扩容</h1><p>　　        每当向数组中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。 数组扩容通过一个公开的方法ensureCapacity(int minCapacity) [^3] 来实现。</p>
<p>　　在实际添加大量元素前，可以使用<code>ensureCapacity</code> 来手动增加<code>ArrayList</code>实例的容量，以减少递增式再分配的数量。</p>
<p>　　数组进行扩容时，会将<strong>老数组</strong>中的元素<strong>重新拷贝</strong>一份到<strong>新的数组</strong>中，每次数组容量的增长大约是其原容量的<strong>1.5倍</strong>。这种操作的代价是很高的，因此在实际使用时 ，我们应该尽量避免数组容量的扩张 <strong>。</strong>当我们可预知要保存的元素的多少时，要在构造ArrayList实例时，就指定其容量 ，以避免数组扩容的发生。或者根据实际需求，通过调用<code>ensureCapacity</code>方法来手动增加<code>ArrayList</code>实例的容量。</p>
<p>　　</p>
<p>　　<img src="https://cdn.yinyongwei.cn/uPic/net-img-1631689720864-f446adea-db2f-4772-89c9-70c0a2b8e0f1-20220304162949-yxvsath.png"></p>
<p>　　</p>
<h1 id="内部方法"><a href="#内部方法" class="headerlink" title="内部方法"></a>内部方法</h1><h2 id="add-、addAll"><a href="#add-、addAll" class="headerlink" title="add() 、addAll()"></a>add() 、addAll()</h2><p>　　         跟C++ 的<code>vector</code>不同，<code>ArrayList</code>没有<code>push_back()</code>方法，对应的方法是 add (E e)[^4]，<code>ArrayList</code>也没有<code>insert()</code>方法，对应的方法是 add(int index, E element)[^4]。</p>
<p>　　         这两个方法都是向容器中添加新元素，这可能会导致<code>capacity</code>不足，因此在添加元素之前，都需要进行剩余空间检查，如果需要则自动扩容。扩容操作最终是通过 grow() 扩容方法[^5]完成的。</p>
<p>　　<img src="https://cdn.yinyongwei.cn/uPic/net-img-1631689787546-105baa4d-a0ea-4c0f-8827-2112669daad5-20220304164641-c33y15y.png"></p>
<blockquote>
<p> <code>add(int index, E e)</code> 需要先对元素进行移动，然后完成插入操作，也就意味着该方法有着线性的时间复杂度。</p>
<p> <code>addAll()</code> 方法能够一次添加多个元素，根据位置不同也有两个版本：</p>
<pre><code> 一个是在末尾添加的 addAll(Collection&lt;? extends E&gt; c)[^6] 方法；

 一个是从指定位置开始插入的addAll(int index, Collection&lt;? extends E&gt; c)[^6]方法；
</code></pre>
<p>跟<code>add()</code>方法类似，在插入之前也需要进行空间检查，如果需要则自动扩容；如果从指定位置插入，也会存在移动元素的情况。<code>addAll()</code>的时间复杂度不仅跟插入元素的多少有关，也跟插入的位置相关。</p>
</blockquote>
<p>　　</p>
<p>　　</p>
<h2 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h2><p>　　     既然底层是一个数组<code>ArrayList</code>的<code>set()</code>方法也就变得非常简单，直接对数组的指定位置赋值即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeCheck(index);<span class="comment">//下标越界检查</span></span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">    elementData[index] = element;<span class="comment">//赋值到指定位置，复制的仅仅是引用</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　</p>
<h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><p>　　       <code>get()</code>方法同样很简单，唯一要注意的是由于底层数组是<code>Object[]</code>，得到元素后需要进行类型转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];<span class="comment">//注意类型转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　</p>
<h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><p>　　        <code>remove()</code>方法也有两个版本，一个是<code>remove(int index)</code>删除指定位置的元素，另一个是<code>remove(Object o)</code>删除第一个满足<code>o.equals(elementData[index])</code>的元素。删除操作是<code>add()</code>操作的逆过程，需要将删除点之后的元素向前移动一个位置。需要注意的是为了让<code>GC</code>起作用，必须显式的为最后一个位置赋<code>null</code>值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; <span class="comment">//清除该位置的引用，让GC起作用</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>　　</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the first occurrence of the specified element from this list,</span></span><br><span class="line"><span class="comment"> * if it is present.  If the list does not contain the element, it is</span></span><br><span class="line"><span class="comment"> * unchanged.  More formally, removes the element with the lowest index</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;i&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * (if such an element exists).  Returns &lt;tt&gt;true&lt;/tt&gt; if this list</span></span><br><span class="line"><span class="comment"> * contained the specified element (or equivalently, if this list</span></span><br><span class="line"><span class="comment"> * changed as a result of the call).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o element to be removed from this list, if present</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list contained the specified element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　        关于<code>Java GC</code>这里需要特别说明一下， 有了垃圾收集器并不意味着一定不会有内存泄漏 。对象能否被<code>GC</code>的依据是是否还有引用指向它，上面代码中如果不手动赋<code>null</code>值，除非对应的位置被其他元素覆盖，否则原来的对象就一直不会被回收。</p>
<h2 id="trimToSize"><a href="#trimToSize" class="headerlink" title="trimToSize()"></a>trimToSize()</h2><p>　　        <code>ArrayList</code> 还给我们提供了将底层数组的容量调整为当前列表保存的实际元素的大小的功能。</p>
<p>　　它可以通过trimToSize()[^7]方法来实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Trims the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance to be the</span></span><br><span class="line"><span class="comment"> * list&#x27;s current size.  An application can use this operation to minimize</span></span><br><span class="line"><span class="comment"> * the storage of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trimToSize</span><span class="params">()</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> (size &lt; elementData.length) &#123;</span><br><span class="line">        elementData = (size == <span class="number">0</span>)</span><br><span class="line">          ? EMPTY_ELEMENTDATA</span><br><span class="line">          : Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>　　</p>
<h2 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf(), lastIndexOf()"></a>indexOf(), lastIndexOf()</h2><p>　　获取元素的第一次出现的<code>index</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the index of the first occurrence of the specified element</span></span><br><span class="line"><span class="comment">     * in this list, or -1 if this list does not contain the element.</span></span><br><span class="line"><span class="comment">     * More formally, returns the lowest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">     * or -1 if there is no such index.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>　　</p>
<p>　　获取元素的最后一次出现的<code>index</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the index of the last occurrence of the specified element</span></span><br><span class="line"><span class="comment">     * in this list, or -1 if this list does not contain the element.</span></span><br><span class="line"><span class="comment">     * More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">     * or -1 if there is no such index.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>　　</p>
<h1 id="Fail-Fast机制"><a href="#Fail-Fast机制" class="headerlink" title="Fail-Fast机制"></a>Fail-Fast机制</h1><p>　　<code>ArrayList</code>也采用了快速失败的机制，通过记录<code>modCount</code>参数来实现。</p>
<p>　　在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。</p>
<p>　　</p>
<p>　　以上内容转载： <a href="https://www.pdai.tech/md/java/collection/java-collection-ArrayList.html#trimtosize" title="Collection - ArrayList 源码解析">Collection - ArrayList 源码解析</a></p>
<p>　　</p>
<hr>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>　　本文章基于<code>Jdk1.7</code>进行分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            list.add(i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="add与自动扩容"><a href="#add与自动扩容" class="headerlink" title="add与自动扩容"></a>add与自动扩容</h1><p>　　执行 <code>add () </code>方式的时候， 先确认是否要进行 扩容 ，后执行添加元素语句；</p>
<p>　　<img src="https://cdn.yinyongwei.cn/uPic/net-img-1631612734788-387b0ec1-e3f2-4f59-abdf-21ab7fce77c2-20220307144539-pp92w8s.png"></p>
<p>　　</p>
<p>　　在 <code>add ()</code>方法中通过 <code>ensureCapacityInternal() </code>方法确定 <code>minCapacity</code> ，第一会扩容为 10 ； </p>
<p>　　也就是说第一次添加数据的时候，因为<code>elementData</code>数组是<code>&#123;&#125;</code> ,会将<code>minCapacity</code> 进行一次 最大值计算 ，然而计算的方式为 <code>Math.max(10,1)</code> ；所以说 第一次扩容大小为10 ； </p>
<p>　　<img src="https://cdn.yinyongwei.cn/uPic/net-img-1631613510868-de4eabed-a3bb-4874-8282-18452acc8a29-20220307144609-6i3zzcc.png"></p>
<p>　　<img src="https://cdn.yinyongwei.cn/uPic/net-img-1631613730363-8d3c8195-f16b-4b83-b215-77183caddc91-20220307144609-6fe104s.png"></p>
<p>　　&#x2F;&#x2F; modCount++ 记录当前集合被修改的次数</p>
<p>　　该方法确认是否真的要进行扩容，</p>
<p>　　如果<code>elementData</code>的大小不够，就需要调用<code>grow() </code>方法进行扩容；</p>
<p>　　<img src="https://cdn.yinyongwei.cn/uPic/net-img-1631613535827-e69f0226-2b40-4443-aaf7-c4b5ff38f18b-20220307144609-l01qudq.png"></p>
<p>　　<code>grow() </code>方法进行实际的数组扩容。</p>
<p>　　使用扩容机制来确定扩容多大；</p>
<p>　　第一次<code>newCapacity=10</code>；</p>
<p>　　第N次后，按照1.5倍扩容；扩容使用<code>Arrays.copyOf();</code></p>
<p>　　<img src="https://cdn.yinyongwei.cn/uPic/net-img-1631673763050-f5c92b5b-40fe-4c19-b825-2af9db75a935-20220307144610-47grngg.png"></p>
<p>　　</p>
<p>　</p>
<h1 id="Debug全流程图"><a href="#Debug全流程图" class="headerlink" title="Debug全流程图"></a><strong>Debug全流程图</strong></h1><blockquote>
<p><strong>Debug 时，强烈建议去掉这个默认设置，否则你看不到最完整的数据信息；</strong></p>
<p><img src="https://cdn.yinyongwei.cn/uPic/net-img-1631688104819-61657b30-2887-41ea-83fb-9137ce06ac95-20220307145051-376b5tg.png"></p>
<p><img src="https://cdn.yinyongwei.cn/uPic/net-img-1631688150814-619e838d-49c5-4f95-b628-96c1471a31b4-20220307145052-kvsao4d.png"></p>
</blockquote>
<p>　　</p>
<p>　　</p>
<h2 id="正式debug"><a href="#正式debug" class="headerlink" title="正式debug"></a>正式debug</h2><p>　　<img src="https://cdn.yinyongwei.cn/uPic/net-img-1631687668393-15d45fd0-036a-4d0f-bfe0-70268a1630c4-20220307144927-lo1qqft.png"></p>
<p>　　</p>
<p>　　</p>
<p>　　</p>
<p>[^1]: # Object数组</p>
<pre><code>Java泛型只是编译器提供的  语法糖 [^2]，所以这里的数组是一个Object数组，以便能够容纳任何类型的对象。

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default initial capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shared empty array instance used for empty instances.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class="line"><span class="comment"> * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class="line"><span class="comment"> * empty ArrayList with elementData == EMPTY_ELEMENTDATA will be expanded to</span></span><br><span class="line"><span class="comment"> * DEFAULT_CAPACITY when the first element is added.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The size of the ArrayList (the number of elements it contains).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>[^2]: # 语法糖 </p>
<pre><code>[语法糖](https://zhuanlan.zhihu.com/p/78454816 &quot;语法糖&quot;)

![image.png](assets/image-20220304155506-dmod2ns.png)




![image.png](assets/image-20220304155547-r9jmyfd.png)
</code></pre>
<p>[^3]: # ensureCapacity(int minCapacity) </p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Increases the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance, if</span></span><br><span class="line"><span class="comment"> * necessary, to ensure that it can hold at least the number of elements</span></span><br><span class="line"><span class="comment"> * specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   minCapacity   the desired minimum capacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">minExpand</span> <span class="operator">=</span> (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">        <span class="comment">// any size if not default element table</span></span><br><span class="line">        ? <span class="number">0</span></span><br><span class="line">        <span class="comment">// larger than default for default empty table. It&#x27;s already</span></span><br><span class="line">        <span class="comment">// supposed to be at default size.</span></span><br><span class="line">        : DEFAULT_CAPACITY;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>[^4]: # add(E e)</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">     ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">     elementData[size++] = e;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

---
</code></pre>
<p>[^5]: # grow() 扩容方法</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Increases the capacity to ensure that it can hold at least the</span></span><br><span class="line"><span class="comment"> * number of elements specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> minCapacity the desired minimum capacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>[^6]: # addAll()方法</p>
<pre><code># addAll(Collection? extends E c)

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends all of the elements in the specified collection to the end of</span></span><br><span class="line"><span class="comment"> * this list, in the order that they are returned by the</span></span><br><span class="line"><span class="comment"> * specified collection&#x27;s Iterator.  The behavior of this operation is</span></span><br><span class="line"><span class="comment"> * undefined if the specified collection is modified while the operation</span></span><br><span class="line"><span class="comment"> * is in progress.  (This implies that the behavior of this call is</span></span><br><span class="line"><span class="comment"> * undefined if the specified collection is this list, and this</span></span><br><span class="line"><span class="comment"> * list is nonempty.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c collection containing elements to be added to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


# addAll(int index, Collection? extends E c)

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts all of the elements in the specified collection into this</span></span><br><span class="line"><span class="comment"> * list, starting at the specified position.  Shifts the element</span></span><br><span class="line"><span class="comment"> * currently at that position (if any) and any subsequent elements to</span></span><br><span class="line"><span class="comment"> * the right (increases their indices).  The new elements will appear</span></span><br><span class="line"><span class="comment"> * in the list in the order that they are returned by the</span></span><br><span class="line"><span class="comment"> * specified collection&#x27;s iterator.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index index at which to insert the first element from the</span></span><br><span class="line"><span class="comment"> *              specified collection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c collection containing elements to be added to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line">    </span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                         numMoved);</span><br><span class="line">    </span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>[^7]: # trimToSize()</p>
<pre><code>![image.png](assets/image-20220304175811-4v2pncy.png)




转载：[Java ArrayList trimToSize()](https://www.cnblogs.com/hfczgo/p/4062826.html &quot;Java ArrayList trimToSize()&quot;)
</code></pre>
]]></content>
      <categories>
        <category>Java笔记</category>
        <category>Java集合框架</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>集合框架</tag>
        <tag>数组</tag>
        <tag>学习</tag>
        <tag>笔记</tag>
        <tag>源码解析</tag>
      </tags>
  </entry>
  <entry>
    <title>Vector底层结构与源码分析</title>
    <url>/2022/06/21/Vector%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84%E4%B8%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>“失业者” 联盟之旅</title>
    <url>/2022/06/30/%E5%A4%B1%E4%B8%9A%E8%80%85%E8%81%94%E7%9B%9F%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码输入错误" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9321100fd46f6713b5d1939f85b096a8e2af8e37371e16f37a91ba1f1edaf868"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你好，请输入密码查看本文内容</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>游记</category>
      </categories>
  </entry>
  <entry>
    <title>OS的发展与分类</title>
    <url>/2022/06/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>计算机操作系统</category>
      </categories>
      <tags>
        <tag>手工操作阶段</tag>
        <tag>批处理阶段</tag>
        <tag>分时操作系统</tag>
        <tag>实时操作系统</tag>
        <tag>网络操作系统</tag>
        <tag>分布式操作系统</tag>
        <tag>个人计算机操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机操作系统（二）操作系统的特征</title>
    <url>/2022/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>操作系统的四个特征，分别是并发，共享、虚拟、和异步，其中<strong>并发与共享</strong>是两个最基本的特征，二者互为存在条件。</p>
<h1 id="并发-Concurrence"><a href="#并发-Concurrence" class="headerlink" title="并发 Concurrence"></a>并发 <strong>Concurrence</strong></h1><p>指的是<strong>两个或多个事件在同一时间的间隔内发生</strong>。这些事件在<strong>宏观上是同时发生</strong>的，但是在<strong>微观上却是交替发生</strong>的。操作系统的并发性指的是计算机系统中同时存在着多个运行的程序。一个单核处理器 同一时刻只能执行一个程序，因此操作系统会协调调度多个程序之间的交替执行，操作系统就是伴随着 <strong>多道程序技术</strong> 而出现的，因此操作系统和程序并发是一起诞生的，且并发性对操作系统而言是必不可少的。</p>
<h3 id="并发vs并行"><a href="#并发vs并行" class="headerlink" title="并发vs并行"></a>并发vs并行</h3><p>并发：在一台处理器上同时处理多个任务；</p>
<p><img src="https://cdn.yinyongwei.cn/uPic/image-20220629144227210.png" alt="image-20220629144227210"></p>
<p>并行：在多台处理器上同时处理多个任务；</p>
<p><img src="https://cdn.yinyongwei.cn/uPic/image-20220629144145001.png" alt="image-20220629144145001"></p>
<p>并发是交替执行、并行是同时执行，然而同时的概念是，并发是从逻辑上是同时，但是并行在物理上是同时。</p>
<ol>
<li>并发针对单核CPU，无法并行；</li>
<li>并行针对多核CPU，并发和并行都可能发生；</li>
<li>都是提高 CPU 处理任务能力的重要手段。</li>
</ol>
<h1 id="共享-Sharing"><a href="#共享-Sharing" class="headerlink" title="共享 Sharing"></a>共享 Sharing</h1><p>即资源共享，是指计算机中的资源可以供内存中的多个并发执行的进程共同使用。</p>
<p>两种资源共享的方式：互斥共享方式、同时共享方式；</p>
<p>互斥共享方式：系统中的某些资源虽然可以提供给多个进程使用，但是在一个时间段内之允许一个进程访问该资源；</p>
<blockquote>
<p>使用QQ和微信视频聊天，同一时间段内摄像头只能分配给其中一个进程。</p>
</blockquote>
<p>同时共享方式：系统中的某些资源，允许同一时间段内由多个进程 <strong>同时</strong>对他们进行访问。（所谓同时，往往是宏观上的，在微观上这些进程可能是交替的对资源进行访问的，即<strong>分时共享</strong>）</p>
<blockquote>
<p>使用QQ发送文件A、同时使用微信发送文件B，从宏观上看，连边都在同时读取与发送文件，说明两个进程都在访问硬盘上的资源，从微观上看，两个进程是交替着访问硬盘的。</p>
</blockquote>
<h3 id="并发与共享的关系"><a href="#并发与共享的关系" class="headerlink" title="并发与共享的关系"></a>并发与共享的关系</h3><p>并发和共享是操作系统的两个最基本的特性，它们又是互为存在条件。一方面资源共享是以程序（进程）的并发性执行为条件的，若系统不允许程序并发执行，自然不存在资源共享问题。另一方面若系统不能对资源共享实施有效管理，则也必将影响到程序并发执行。</p>
<h1 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h1><p>是指把一个物理上的实体变成若干个逻辑上的对应物。物理实体是实际存在的，而逻辑上的对应物是用户感受到的。虚拟技术包含空分复用技术（如虚拟存储器）和时分复用技术（如虚拟处理器）。</p>
<h3 id="空分复用技术"><a href="#空分复用技术" class="headerlink" title="空分复用技术"></a>空分复用技术</h3><blockquote>
<p>在一台仅有4GB运存的电脑上，运行着GTA5（需要4GB）、腾讯QQ（比如需要256MB）、微信（比如需要256MB）、网易云音乐（比如需要256MB），电脑仍然可以同时将这些软件 同时运行。这就是用到了虚拟存储技术，实际主机只有4GB运存，但是在用户看来运行的程序所占用的内存似乎远远大于了4GB。</p>
</blockquote>
<h3 id="时分复用技术"><a href="#时分复用技术" class="headerlink" title="时分复用技术"></a>时分复用技术</h3><blockquote>
<p>在一台单核的电脑上，“同时” 运行着腾讯QQ、Chrome、网易云音乐、迅雷等软件，单核CPU处理器下的电脑能够同时运行这么多程序，其实这里使用了时分复用技术，在微观上看，是把一整块时间分成了很多分时间片，在微小时间段内进行交替作业。</p>
</blockquote>
<h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><p>是指在多道程序环境下，运行多个程序并发执行，但是由于资源有限，进程的执行不是一贯到底的。而是走走停停，以不可预知的速度向前推进。这就是进程的异步行。</p>
<p>操作系统的异步性体现在三个方面：</p>
<p>一是进程的异步性，进程以人们不可预知的速度向 前推进。</p>
<p>二是程序的不可再现性，即程序执行的结果有时是不确定的。</p>
<p>三是程序执行时间的不可预知性，即每个程序何时执行，执行顺序以及完成时间是不确定的。</p>
]]></content>
      <categories>
        <category>计算机操作系统</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>共享</tag>
        <tag>虚拟</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机操作系统（一）概念功能和目标</title>
    <url>/2022/06/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p> 操作系统（operating system，简称OS）是管理<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/5459592">计算机硬件</a>与<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>资源的<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F/3220205">计算机程序</a>。操作系统需要处理如管理与<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE/2394679">配置</a><a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98/103614">内存</a>、决定<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90/974435">系统资源</a>供需的优先次序、控制<a href="https://baike.baidu.com/item/%E8%BE%93%E5%85%A5%E8%AE%BE%E5%A4%87/10823368">输入设备</a>与<a href="https://baike.baidu.com/item/%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87/10823333">输出设备</a>、操作网络与管理<a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/4827215">文件系统</a>等基本事务。操作系统也提供一个让用户与系统<a href="https://baike.baidu.com/item/%E4%BA%A4%E4%BA%92/6964417">交互</a>操作的界面。</p>
<p> 我们可以结合<strong>配电脑</strong>的场景进行理解，首先我们需要在网上采购电脑主机箱、主板、电源、CPU、内存条、硬盘、显卡、显示器等等相关<strong>硬件设备</strong>， 然后将硬件组装成为一台完整的主机；组装完成后需要在硬盘中安装操作系统，操作系统有很多种类（Windows、Linux、MacOs、Android、IOS等），一般家用都会安装window；系统安装成功后，打开主机，<strong>此时操作系统会进行一系列的硬件调度</strong>等相关动作；我们可以在操作系统只上安装各种应用程序，这些应用程序都运行在操作系统之上的，那么作为程序开发者，可以通过编程语言对操作系统上的系统接口进行调用，从而实现一系列的高效软件应用。 </p>
<p>​    操作系统其实最接近硬件，操作系统是计算机系统中最基础的系统软件，其会对软件、硬件进行管理。</p>
<p><img src="https://cdn.yinyongwei.cn/uPic/image-20220627132224511.png" alt="image-20220627132224511"></p>
<p><img src="https://cdn.yinyongwei.cn/uPic/image-20220629001759507.png" alt="image-20220629001759507"></p>
<h1 id="操作系统的功能和目标"><a href="#操作系统的功能和目标" class="headerlink" title="操作系统的功能和目标"></a>操作系统的功能和目标</h1><h2 id="资源管理者"><a href="#资源管理者" class="headerlink" title="资源管理者"></a>资源管理者</h2><p>作为系统资源的管理者、提供了处理机管理、存储器管理、文件管理、设备管理。其目标是为了实现安全、高效；</p>
<p>用QQ和朋友视频聊天</p>
<blockquote>
<ol>
<li>在硬盘的文件夹中找到QQ安装的文件位置； （对应文件管理）</li>
<li>双击运行QQ.exe;（程序载入缓存）</li>
<li>QQ程序运行；（对应进程被处理机（CPU）处理）</li>
<li>开始和朋友视频聊天（调度摄像头设备分配给进程）</li>
</ol>
</blockquote>
<h2 id="向用户提供服务"><a href="#向用户提供服务" class="headerlink" title="向用户提供服务"></a>向用户提供服务</h2><h3 id="作为用户和计算机硬件之间的接口"><a href="#作为用户和计算机硬件之间的接口" class="headerlink" title="作为用户和计算机硬件之间的接口"></a>作为用户和计算机硬件之间的接口</h3><p>命令接口：允许用户<strong>直接使用</strong>（命令接口又分为 联机命令接口与脱机命令接口）</p>
<blockquote>
<p>联机命令接口：用户说一句、系统做一句；（比如cmd命令、bash命令）</p>
</blockquote>
<blockquote>
<p> 脱机命令接口：用户说一堆、系统做一堆（比如shell脚本、bat脚本）</p>
</blockquote>
<p>程序接口：允许用户通过程序<strong>间接调用</strong>  由一组<strong>系统调用</strong>组成（程序接口&#x3D;系统调用）</p>
<blockquote>
<p>系统调用&#x3D;系统调用命令&#x3D;广义指令</p>
</blockquote>
<p>GUI（图形用户界面 Graphical User Interface）：现代操作系统中最流行的图形用户接口</p>
<blockquote>
<p>用户可以使用形象的图形界面进行操作、不需要记忆复杂的命令、参数。例如删除一个文件，只用把文件拖拽到回收站</p>
</blockquote>
<h2 id="对硬件机器进行扩展"><a href="#对硬件机器进行扩展" class="headerlink" title="对硬件机器进行扩展"></a>对硬件机器进行扩展</h2><h3 id="作为最接近硬件的层次"><a href="#作为最接近硬件的层次" class="headerlink" title="作为最接近硬件的层次"></a>作为最接近硬件的层次</h3><p>没有任何软件支持的计算机称之为 <strong>裸机</strong> ，在裸机上安装操作系统，可以提供资源管理功能和方便用户服务的功能，将裸机改造成为功能更强、使用更便捷的机器。通常把覆盖了软件的机器称之为 <strong>扩展机器</strong>、又称之为<strong>虚拟机</strong></p>
]]></content>
      <categories>
        <category>计算机操作系统</category>
      </categories>
      <tags>
        <tag>处理机管理</tag>
        <tag>存储器管理</tag>
        <tag>文件管理</tag>
        <tag>设备管理</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
</search>
